package OrmArchivarius.Manager;

import OrmArchivarius.Annotations.Entity;
import OrmArchivarius.Annotations.ManyToOne;
import OrmArchivarius.DBManager.TableManager;
import OrmArchivarius.DBManager.utils.ClassUtils;
import org.reflections.Reflections;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Optional;
import java.util.Set;

public class OrmManager {
    TableManager tableManager;

    public OrmManager(String dbName) {
        this.tableManager = new TableManager(dbName);
    }

    public static OrmManager get(String dbName) {
        return new OrmManager(dbName);
    }

    public void scanPackages(Class<?> rootClass) {
        // get all the classes marked with @Entity in the subpackages
        Package pack = rootClass.getPackage();
        Reflections reflections = new Reflections(pack.getName());
        Set<Class<?>> allClasses = reflections.getTypesAnnotatedWith(Entity.class);
        for (Class<?> aClass : allClasses) {
            tableManager.createTableIfNotExists(aClass, aClass.getDeclaredFields());
        }
    }

    public void save(Object o) {
        if (getId(o) != null) {
            // throw exception
            throw new RuntimeException("trying to insert existing object");
        } else {
            // save the object to DB
            // get back the autogenerated Id
            // set the id for the object
            tableManager.insertIntoTable(o);
        }
    }

    public void update(Object o) {
        tableManager.updateRecord(o);
    }

    private static Long getId(Object o) {
        // use reflection to get the field with Id annotation
        return ClassUtils.getObjectId(o);
    }

    public <T> Optional<T> getById(Class<T> clazz, Long id1) {
        return tableManager.getById(clazz, id1);
    }

    public <T> List<T> getAll(Class<T> clazz) {
        return tableManager.getAll(clazz);
    }

    public <T> List<T> getAllBy(Class<T> clazz, Object o) {
        boolean isManyToOnePresent = false;
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            if (field.isAnnotationPresent(ManyToOne.class))
                isManyToOnePresent = true;
        }
        if (isManyToOnePresent) {
            return tableManager.getAllBy(clazz, o);
        }
        return List.of();
    }

    public boolean delete(Object object) {
        // stub vs mock
        return tableManager.deleteRecord(object);
    }
}
